<?php

namespace Domain\Transactions\Services;

use App\Domain\Transactions\Dto\TransactionDto;
use App\Domain\Transactions\Enums\TransactionDirectionEnum;
use App\Domain\Transactions\Enums\TransactionStatusEnum;
use App\Domain\Transactions\Models\Transaction;
use App\Domain\Transactions\Models\TransactionItem;
use App\Domain\Transactions\Services\TransactionService;
use App\Domain\Wallets\Enums\WalletTypesEnum;
use App\Domain\Wallets\StoreWallet;
use App\Domain\Wallets\UserWallet;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Collection;
use Tests\TestCase;
use Tests\Unit\Domain\Traits\WalletMockTrait;

class TransactionServiceTest extends TestCase
{
    use RefreshDatabase;
    use WalletMockTrait;

    protected TransactionService $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = \App::make(TransactionService::class);
    }

    /**
     * @param string $transactionId
     * @return Transaction|null
     */
    protected function getTransactionState(string $transactionId): ?Transaction
    {
        return Transaction::where(['id' => $transactionId])->first();
    }

    /**
     * @param string $transactionId
     * @return TransactionItem|null
     */
    protected function getFromTransactionItemState(string $transactionId): ?TransactionItem
    {
        return TransactionItem::where(['transaction_id' => $transactionId, 'direction' => TransactionDirectionEnum::FROM])->first();
    }

    /**
     * @param string $transactionId
     * @return TransactionItem|null
     */
    protected function getToTransactionItemState(string $transactionId): ?TransactionItem
    {
        return TransactionItem::where(['transaction_id' => $transactionId, 'direction' => TransactionDirectionEnum::TO])->first();
    }

    public function testCreate()
    {
        $userWalletModel = $this->mockUserWalletModel();
        $storeWalletModel = $this->mockStoreWalletModel();

        $dto = new TransactionDto(
            from: new UserWallet($userWalletModel->number),
            value: 100,
            to: new StoreWallet($storeWalletModel->number)
        );

        $transactionId = $this->service->create($dto);

        $currentTransactionState = $this->getTransactionState($transactionId);
        $fromTransactionState = $this->getFromTransactionItemState($transactionId);
        $toTransactionState = $this->getToTransactionItemState($transactionId);

        $this->assertEquals(TransactionStatusEnum::NEW, $currentTransactionState->status);
        $this->assertEquals(100, $currentTransactionState->value);

        $this->assertNotNull($fromTransactionState);
        $this->assertEquals($userWalletModel->number, $fromTransactionState->wallet_number);
        $this->assertEquals(WalletTypesEnum::USER, $fromTransactionState->type);

        $this->assertNotNull($toTransactionState);
        $this->assertEquals($storeWalletModel->number, $toTransactionState->wallet_number);
        $this->assertEquals(WalletTypesEnum::STORE, $toTransactionState->type);
    }
}
