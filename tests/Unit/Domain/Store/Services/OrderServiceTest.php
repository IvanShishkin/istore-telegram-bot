<?php
declare(strict_types=1);

namespace Domain\Store\Services;

use App\Domain\Products\Dto\ProductDto;
use App\Domain\Products\Models\Product;
use App\Domain\Store\Dto\OrderDto;
use App\Domain\Store\Enums\OrderStatusEnum;
use App\Domain\Store\Exceptions\OrderNotExistsException;
use App\Domain\Store\Services\OrderService;
use App\Domain\Transactions\Models\Transaction;
use App\Domain\User\Dto\UserDto;
use App\Domain\User\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\Domain\Traits\OrderMockTrait;

class OrderServiceTest extends TestCase
{
    use RefreshDatabase;
    use OrderMockTrait;

    protected OrderService $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = \App::make(OrderService::class);
    }

    public function testCreate()
    {
        /** @var User $user */
        $user = User::factory()->create()->first();
        /** @var Product $product */
        $product = Product::factory()->create()->first();

        /** @var Transaction $transaction */
        $transaction = Transaction::factory()->create()->first();

        $result = $this->service->create(
            userDto: UserDto::from($user->toArray()),
            productDto: ProductDto::from($product->toArray()),
            transactionId: $transaction->id
        );

        $this->assertEquals(OrderStatusEnum::NEW, $result->getStatus());
        $this->assertEquals($product->price, $result->getPrice());
        $this->assertEquals($product->id, $result->getProductId());
        $this->assertEquals($transaction->id, $result->getTransactionId());
        $this->assertEquals($user->id, $result->getUserId());
    }

    public function testById()
    {
        $createdOrder = $this->mockOrder();

        $result = $this->service->byId($createdOrder->id);

        $this->assertIsObject($result, OrderDto::class);
    }

    public function testByIdNotExists()
    {
        $this->expectException(OrderNotExistsException::class);
        $result = $this->service->byId(fake()->randomNumber());
    }

}
